Create a folder name called Nov_<firstletterinfirstandlastname>
change your location to the folder which you created in step1
create two more folders called folder1, and folder2
Create two more folders inside folder1 and two more inside folder2
Shuffle all five files between those folders
Create five files at the same location from step1
Copy one file at a time from your location to folder1(copy all five files)
move all five files from folder1 to folder2
Add contect to all files(display your name and Linux Administrator)
check the contect in all files
copy all files from folder2 to the location at step1.
Remove two files from your current location.

Create an EC2 instance
Connect to your EC2 instance using ssh
Create 5 files and 5 folders
Change permissions for all files and folders to have full permissions
Generate ssh keys (ssh-keygen)
Add your public key to github 
install git on your EC2 instance(sudo yum install git -y)
Now clone all your 5 repositories
copy one file and one folder to each respository from step 3
commit all changes to your remote repository.
terminate your ec2 instance.

Clone all repositories to your local
Create 2 branches called feature1 and feature2 on each repository
add some changes from each branch on each repository
create a pull request from your each feature branch to main/master on each repository
merge those changes from your feature branches and pull those changes from your remote repository to local
merge feature2 changes to feature1 branch on each repository.

Create an EC2 instance 
Connect to your EC2 instance
Install apache on your EC2 instance
Copy sample webapplication code from w3schools to /var/www/html/index.html on the EC2 instance
Change security group inbound traffic rules on EC2
once you verify website on the http please go ahead and create ami for your instance
Once ami created terminate your old instance and use your new ami to create new instance then change the security group rules and verify from internet
Create a data lifecycle policy to create snapshots for everyone hour, wait for one hour verify snapshots created then terminate your instance and terminate your lifecycle policy.

Create an IAM user called <nameyourchoice>, create a specific group <name your choice>, and attach only EC2fullaccess permissions to that group.
Logout and Login back as an IAM user.
Create an EC2 instance and an IAM user.
connect to your EC2 instance 
install git on that ec2 instance (command: sudo yum install git -y)
Clone one your repositories from github
Add 10 files to that repository
commit them to remote repository.
go to your aws account and terminate that instance 
verify that you are unable to create other resources than EC2
Logout as an IAM user and login back as a root user
modify that IAM group permissions
verify that you are able to create other service.
logout and log back in as root user and delete all IAM users.

Install ansible on your computer
Create an IAM user with ec2 full aceess, download csv file to get credentials
Create a repository in github called ansible-automation
clone your repository to your local computer
Write an Ansible playbook to create an EC2 instace
Write an Ansible playbook to create an AMI for the EC2 instance created in line 39
Write an Ansible playbook to create snapshots for ebs volumes
Write an Ansible playbook to terminate an EC2 instance
Commit all your playbooks to github

Create an IAM policy to stop start ec2(you will see the policy json in the link)
Create an IAM role and attach policy created above
Create a lambda function to stop ec2 instances(you will see the function code in the link)(note: in advanced settings choose iam role which is created above)
Create a cloudwatch rule with cronjob of 10 mins next to your hour to stop 
Create an one lambda function to start your instances
Create a cloudwatch alarm with 13 mins next to your hour to start
verify both lambda functions logs
Terminate all lambda functions and cloudwatch rules
Create a cloudformation stack to create entire above steps through console(script will be provided)
delete cloduformations stack

Create a cloudformation stack using ansible cloudformation module.

Create an EC2 instance and install terraform
create a module(folder) to create an EC2 instance 
create a module(folder) to create an IAM user
create a module(folder) create s3 bucket
once you verify them destroy them using terraform destroy
create a branch in your github at infra-automation folder, and commit your terraform scripst to github and create a PR
follow this document: https://learn.hashicorp.com/tutorials/terraform/aws-build


Create a separate repository name called Docker_repo
Create an EC2 instance, install docker on that instance
Clone Docker_repo to your instance
Add a sample Dockerfile to build an image to print your company name and your title(java or python your choice)
build a docker image with a name sysadmin
verify as a container
Create a file name called demo_dockerfile.txt
Explain each layer in detail in your dockerfile which is created above.
Create a readme.md file 
Explain what is docker image, docker container, diff between image and container, docker commands you used for the above docker build project wiht one example and finally troubleshooting steps and commands with one sentence explanation.
commit changes to your remote repository
terminate your instance 
